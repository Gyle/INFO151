<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="C:/Users/kylec/Downloads/LibraryDB.sqlite" foreign_keys="1"/><window><current_tab id="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="125"/><column_width id="3" width="2695"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="Item"/><default_encoding codec=""/><browsetable_info data="AAAABgAAAAoATQBlAGQAaQBhAAAAAAAAAAAAAAAAAAAAAAAAAAAA//////////8AAAAA/////wAAAAgATABvAGEAbgAAAAMAAAAAAAAAAAAAAAAAAAAAAP//////////AAAAAP////8AAAAIAEkAdABlAG0AAAAFAAAAAAAAAAAAAAAAAAAAAAD//////////wAAAAD/////AAAAGgBJAG4AdgBlAG4AdABvAHIAeQBJAHQAZQBtAAAAAwAAAAEAAAAAAAAAAAAAAAAA//////////8AAAAA/////wAAABAAQwB1AHMAdABvAG0AZQByAAAAAAAAAAAAAAAAAAAAAAAAAAAA//////////8AAAAA/////wAAABAAQwBhAHQAZQBnAG8AcgB5AAAAAAAAAAAAAAAAAAAAAAAAAAAA//////////8AAAAA/////w=="/></tab_browse><tab_sql><sql name="Assignment3_Q1.sql">--Question 1
/*Write the SQL to update the Replacement Cost of all items published between
2005 and 2010. The new replacement cost = old replacement cost + (0.5% of
old replacement cost) X (Published Year - 2005) and at the same time update
the LostFee. The LostFee is the new ReplacementCost plus a re-stocking fee of
$10. (Note: use only one update statement.)*/

UPDATE Item		-- 0.005 as that is 0.5%
SET ReplacementCost = ROUND(ReplacementCost + (ReplacementCost * 0.005) * (PubYear - 2005),2),
	LostFee = ROUND(ReplacementCost + (ReplacementCost * 0.005) * (PubYear - 2005),2) + 10
WHERE PubYear BETWEEN 2005 AND 2010</sql><sql name="Assignment3_Q2.sql">--Question 2
/*Write the SQL to delete the rows in the Loan table where the *overdue fee* is less
than the average overdue fee in the Loan table. (Note: use only one delete
statement.)*/

DELETE FROM Loan
WHERE OverdueFee &lt; (SELECT AVG(OverdueFee)
					FROM Loan )

</sql><sql name="Assignment3_Q3.sql">--Question 3
/*. Write the SQL statement to update the “DueDate” of all the “DVD” items
borrowed by “INFO” students in the Loan table. The new ”DueDate” is the
original “DueDate” plus 10 days and 12 hours. (Note: ignore the “CheckedIn”
column.)*/

UPDATE Loan
SET DueDate = datetime(DueDate, '10 days', '12 hours') 
WHERE LoanID IN (SELECT l.LoanID
				 FROM Customer c JOIN Loan l JOIN InventoryItem ii JOIN Item i JOIN Media m
					  ON c.CustomerID = l.CustomerID AND l.InventoryItemID = ii.InventoryItemID AND ii.ItemID = i.ItemID AND i.MediaID = m.MediaID
				 WHERE Major = 'INFO' AND MediaCode = 'DVD')

</sql><sql name="Assignment3_Q3_subquery.sql">--Question 3 SUB QUERY
SELECT l.LoanID
FROM Customer c JOIN Loan l JOIN InventoryItem ii JOIN Item i JOIN Media m
	 ON c.CustomerID = l.CustomerID AND l.InventoryItemID = ii.InventoryItemID AND ii.ItemID = i.ItemID AND i.MediaID = m.MediaID
WHERE Major = 'INFO' AND MediaCode = 'DVD'</sql><sql name="Assignment3_Q4a.sql">--Question 4a
/*The Library manager plans to group items by genre and asks the database
administrator for these changes to the database. Database administrator makes
the following suggestions. Write the SQL statements to implement his
suggestions.
(a) Create a table named Category. The Category table contains three attributes:
i. CategoryID: Integer, Primary Key (without auto-increment)
ii. CategoryDescription: Text
iii. CategoryCode: Text*/

CREATE TABLE Category(
	CategoryID INTEGER PRIMARY KEY,
	CategoryDescription TEXT,
	CategoryCode Text
)
</sql><sql name="Assignment3_Q4b.sql">--Question 4b
/*(b) After creating the above table, the library manager wants to add a MediaID
attribute which is a foreign key from the Media table to the Category table.
Write the alter SQL to add MediaID in the table. Use the Integer data type
for the MediaID attribute.*/

ALTER TABLE Category
ADD COLUMN MediaID INTEGER REFERENCES Media(MediaID);
-- I tried using ADD FOREIGN KEY but you can't as Media ID was not created yet.</sql><sql name="Assignment3_Q5.sql">--Question 5
/*Use a single insert SQL to insert the data shown in the following table into the
Category table. The insert SQL must include the names of the attributes.*/

INSERT INTO Category
VALUES (1,'SCI','Science',4),
	   (2,'MED','Medical',4),
	   (3,'CLA','Classics',4)
</sql><sql name="Assignment3_Q6.sql">--Question 6
/*Use a correlated sub query method to find the customers who had made at least
one loan. Show the CustomerID and the ‘full name’ (firstname, lastname).(Hint:
use the customer table, the loan table and the “where exists’ method.)*/

SELECT CustomerID AS &quot;CustomerID&quot;, FirstName||','||LastName AS &quot;Full Name&quot;
FROM Customer
WHERE EXISTS (SELECT CustomerID
			  FROM Loan
			  WHERE Customer.CustomerID = Loan.CustomerID)
</sql><sql name="Assignment3_Q7.sql">--Question 7
/*Update the customer table to create an email for the active member who has
been a member on and before 2011 and made at least one loan. In the same
update, change the ‘active’ status to ‘active gold’ for those customers who meet
the criteria. The email format is firstname.lastname@vuw.ac.nz. (Hint: use the
“where exists” method.)*/

UPDATE Customer
SET MemberStatus = 'active gold',
	Email = FirstName||'.'||LastName||'@vuw.ac.nz'
WHERE MemberSince &lt;= 2011 AND EXISTS (SELECT CustomerID
									  FROM Loan
									  WHERE Customer.CustomerID = Loan.CustomerID)
	
</sql><sql name="Assignment3_Q8.sql">--Question 8
/*Delete the rows in the Loan table which item has been ‘checkedin’ and with a
‘damaged’ status in the InventoryItem table. (Hint: use the “where exists”
method.)*/

DELETE FROM Loan
WHERE CheckedIn IS NOT NULL AND EXISTS (SELECT *	-- checking for if checked in is not null as that mean it is checked it.
									    FROM InventoryItem
									    WHERE Loan.InventoryItemID = InventoryItem.InventoryItemID 
										  	  AND Status = 'Damaged')

</sql><sql name="Assignment3_Q8_subquery.sql">--Question 8 Sub query
-- This does not include the check for the loan ID as
-- Loan table is not used in sub query
SELECT *
FROM InventoryItem
WHERE Status = 'Damaged'</sql><current_tab id="9"/></tab_sql></sqlb_project>
